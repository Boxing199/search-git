{"version":3,"sources":["reducers/data.js","actions/actionTypes.js","components/SearchPage/SearchPage.js","AppContainer.js","actions/index.js","components/OrgPage/OrgPage.js","routes.js","serviceWorker.js","index.js"],"names":["initialState","orgs","data","state","arguments","length","undefined","action","type","Object","objectSpread","result","items","SearchPage","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","orgsname","_this2","console","log","react_default","a","createElement","value","username","onChange","e","setState","target","placeholder","onClick","getOrgs","map","org","index","key","react_router_dom","to","concat","login","React","Component","mapDispatchToProps","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","url","response","responseBody","wrap","_context","prev","next","fetch","sent","json","t0","stop","_x","apply","AppContainer","connect","OrgPage","MainRouter","react_router","path","exact","component","Boolean","window","location","hostname","match","configureStore","createStore","applyMiddleware","thunk","__webpack_require__","d","__webpack_exports__","src_store","store","ReactDOM","render","es","routes_MainRouter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAEaA,EAAe,CAC1BC,KAAM,IAEKC,EAAO,WAAkC,IAAjCC,EAAiCC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBJ,EAAcO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACpD,OAAQC,EAAOC,MACb,ICPsB,aDQpB,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKN,EAAZ,CAAmBF,KAAMM,EAAOI,OAAOC,QACzC,QACE,OAAOT,qEEwBEU,cA9Bb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAQ,KAAAJ,IACjBE,EAAAN,OAAAS,EAAA,EAAAT,CAAAQ,KAAAR,OAAAU,EAAA,EAAAV,CAAAI,GAAAO,KAAAH,KAAMH,KACDX,MAAQ,CAAEkB,SAAU,IAFRN,wEAIV,IAAAO,EAAAL,KAEP,OADAM,QAAQC,IAAIP,KAAKd,MAAMkB,UAErBI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,SACEnB,KAAK,OACLoB,MAAOX,KAAKd,MAAM0B,SAClBC,SAAW,SAAAC,GAAC,OAAIT,EAAKU,SAAS,CAAEX,SAAUU,EAAEE,OAAOL,SACnDM,YAAY,4BAEdT,EAAAC,EAAAC,cAAA,UAAQQ,QAAS,kBAAMb,EAAKR,MAAMsB,QAAQd,EAAKnB,MAAMkB,YAArD,oBAGAI,EAAAC,EAAAC,cAAA,UACGV,KAAKH,MAAMb,KAAKoC,IAAI,SAACC,EAAKC,GAAN,OACnBd,EAAAC,EAAAC,cAAA,MAAKa,IAAKD,GACRd,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAMC,GAAE,iBAAAC,OAAmBL,EAAIM,QAAUN,EAAIM,mBAtBlCC,IAAMC,WCKzBC,EAAqB,CACvB7C,OACAkC,QCFmB,SAACf,GAAD,sBAAA2B,EAAAvC,OAAAwC,EAAA,EAAAxC,CAAAyC,EAAAxB,EAAAyB,KAAc,SAAAC,EAAOC,GAAP,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAxB,EAAA+B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAE3BL,EAF2B,GAAAX,OADf,0BACe,mBAAAA,OAEKtB,EAFL,aAAAqC,EAAAE,KAAA,EAGVC,MAAMP,GAHI,cAG3BC,EAH2BG,EAAAI,KAAAJ,EAAAE,KAAA,EAINL,EAASQ,OAJH,OAI3BP,EAJ2BE,EAAAI,KAKjCT,EAXgC,CAChC7C,KHHsB,aGItBG,OASmB6C,IALcE,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAM,GAAAN,EAAA,SAOjCnC,QAAQC,IAAI,UAPqB,yBAAAkC,EAAAO,SAAAb,EAAA,kBAAd,gBAAAc,GAAA,OAAAlB,EAAAmB,MAAAlD,KAAAb,YAAA,KDURgE,EALaC,YARJ,SAAAlE,GAAK,MAAK,CAChCF,KAAME,EAAMF,OASZ8C,EAF0BsB,CAG1BxD,GENayD,MARf,WACE,OACI7C,EAAAC,EAAAC,cAAA,4BCEO4C,EAAa,kBACxB9C,EAAAC,EAAAC,cAACc,EAAA,EAAD,KACEhB,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWP,IACjC3C,EAAAC,EAAAC,cAAC6C,EAAA,EAAD,CAAOC,KAAK,oBAAoBC,OAAK,EAACC,UAAWL,sBCGjCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPC,SAASC,IAEd,OADcC,YAAYhF,EAAMF,EAAcmF,YAAgBC,MAZhEC,EAAAC,EAAAC,EAAA,mCAAAN,IAAAI,EAAAC,EAAAC,EAAA,0BAAAC,IAeO,IAAMC,EAAQR,IAErBS,IAASC,OACPlE,EAAAC,EAAAC,cAACiE,EAAA,EAAD,CAAUH,MAAOA,GACfhE,EAAAC,EAAAC,cAACkE,EAAD,OAEFC,SAASC,eAAe,SD4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.79898822.chunk.js","sourcesContent":["import * as type from '../actions/actionTypes';\n\nexport const initialState = {\n  orgs: [],\n};\nexport const data = (state = initialState, action) => {\n  switch (action.type) {\n    case type.ADD_RESULT:\n      return { ...state, orgs: action.result.items };\n    default:\n      return state;\n  }\n};\n","export const ADD_RESULT = 'ADD_RESULT';","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nclass SearchPage extends React.Component {\n  constructor(props) {\n    super(props); \n    this.state = { orgsname: '' };\n  }\n  render() {\n    console.log(this.state.orgsname);\n    return (\n      <div>\n        <h2>Github organisations: </h2>\n        <input\n          type=\"text\"\n          value={this.state.username}\n          onChange={ e => this.setState({ orgsname: e.target.value })}\n          placeholder=\"Github organisations...\"\n        />\n        <button onClick={() => this.props.getOrgs(this.state.orgsname)}>\n          Get organisation\n        </button>\n        <ul>\n          {this.props.orgs.map((org, index) => (\n            <li  key={index}>\n              <Link to={`/organisation/${org.login}`}>{org.login}</Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default SearchPage;","import { connect } from 'react-redux';\nimport { data } from './reducers/data';\nimport { getOrgs } from './actions/index'\nimport SearchPage from './components/SearchPage/SearchPage';\n\nconst mapStateToProps = state => ({\n  orgs: state.orgs,\n});\nconst mapDispatchToProps = {\n    data,\n    getOrgs,\n};\n\nexport const AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchPage);\n\nexport default AppContainer;\n","import * as type from './actionTypes';\n\nexport const addResult = result => ({\n    type: type.ADD_RESULT,\n    result,\n  });\n\nexport const apiUrl = 'https://api.github.com/';\nexport const getOrgs = (orgsname) => async (dispatch) => {\n  try {\n    const url =`${apiUrl}search/users?q=${orgsname}+type:org`;\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addResult(responseBody));\n  } catch {\n    console.log('ERROR!');\n  }\n};","import React from 'react';\n\nfunction OrgPage() {\n  return (\n      <div>\n        ORGANISTAION\n      </div>\n  );\n}\n\nexport default OrgPage;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport AppContainer from './AppContainer'\nimport OrgPage from './components/OrgPage/OrgPage';\n\n\nexport const MainRouter = () => (\n  <Router>\n    <Route path=\"/\" exact component={AppContainer} />\n    <Route path=\"/organisation/:id\" exact component={OrgPage} />\n  </Router>\n);\n\nexport default MainRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { MainRouter } from './routes';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { data } from './reducers/data';\nimport { initialState } from './reducers/data';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n  const store = createStore(data, initialState, applyMiddleware(thunk));\n  return store;\n}\nexport const store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <MainRouter />\n  </Provider>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}